<RadzenDataGrid @ref="_dataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" Data="@CurrentMatch.Scores" TItem="Score"
                ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" Style="height:300px">
    <Columns>
        <RadzenDataGridColumn TItem="Score" Property="DateTime" Title="Time" />
        <RadzenDataGridColumn TItem="Score" Property="Scorer" Title="Scorer" Frozen="true">
            <FooterTemplate>
                Points: <b>@ScoreCounter()</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Score" Property="Assist" Title="Assist" Frozen="true" />

    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public Match CurrentMatch{ get; set; }

    private RadzenDataGrid<Score> _dataGrid{ get; set; }

    [Parameter]
    public EventCallback<List<Score>> ScoreListChanged { get; set; }

    public void AutomaticReload(List<Score> scores)
    {
        ScoreListChanged.InvokeAsync(scores as List<Score>);
        _dataGrid.Reload();
    }

    public void Reload()
    {
        _dataGrid.Reload();
    }

    public string ScoreCounter()
    {
        int teamACount = CurrentMatch.Scores.Where(Score => (CurrentMatch.Team1.Players.Contains(Score.Scorer))).ToList().Count;
        int teamBCount = CurrentMatch.Scores.Where(Score => (CurrentMatch.Team2.Players.Contains(Score.Scorer))).ToList().Count;
        return $"{teamACount} : {teamBCount}";
    }
}
