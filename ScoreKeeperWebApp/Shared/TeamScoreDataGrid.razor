@inject Data.DataHandlerService DataHandler
@implements IDisposable

<RadzenDataGrid @ref="_dataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" Data="@CurrentMatch.Scores" TItem="Score"
                ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" Style="height:300px">
    <Columns>
        <RadzenDataGridColumn TItem="Score" Property="DateTime" Title="Time" />
        <RadzenDataGridColumn TItem="Score" Property="Scorer" Title="Scorer" Frozen="true">
            <FooterTemplate>
                Points: <b>@ScoreCounter</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Score" Property="Assist" Title="Assist" Frozen="true" />

    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public Match CurrentMatch{ get; set; }

    private RadzenDataGrid<Score> _dataGrid{ get; set; }

    string ScoreCounter;

    public void Reload()
    {
        _dataGrid.Reload();
    }

    protected override void OnInitialized()
    {
        DataHandler.OnScoreChange += ReloadScore;
    }

    void ReloadScore()
    {
        _dataGrid.Reload();
        ScoreCounter = DataHandler.ScoreCounter();
    }

    public void Dispose()
    {
        DataHandler.OnScoreChange -= ReloadScore;
    }


}
