@page "/currentmatch"
@inject NavigationManager UriHelper

<h3>OnGoingMatch</h3>
@currentMatch.Team1.TeamName
Scorer:
<PlayerSelect @ref="playerA" PlayerList="playersA" @bind-SelectedPlayer="scorer"></PlayerSelect>
Assist:
<PlayerSelect @ref="playerB" PlayerList="playersA" @bind-SelectedPlayer="assist"></PlayerSelect>

<RadzenButton Click=@(args => AddToScoreA()) Text="Add" Style="margin-bottom: 20px; width: 150px" />

@currentMatch.Team2.TeamName
Scorer:
<PlayerSelect @ref="playerC" PlayerList="playersB" @bind-SelectedPlayer="scorer"></PlayerSelect>
Assist:
<PlayerSelect @ref="playerD" PlayerList="playersB" @bind-SelectedPlayer="assist"></PlayerSelect>

<RadzenButton Click=@(args => AddToScoreB()) Text="Add" Style="margin-bottom: 20px; width: 150px" />

<RadzenDataGrid @ref="dataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" Data="@currentMatch.Scores" TItem="Score"
                ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" Style="height:300px">
    <Columns>
        <RadzenDataGridColumn TItem="Score" Property="DateTime" Title="Time" />
        <RadzenDataGridColumn TItem="Score" Property="Scorer" Title="Scorer" Frozen="true">
            <FooterTemplate>
                Points: <b>@currentMatch.Scores.Where(Score => (currentMatch.Team1.Players.Contains(Score.Scorer))).ToList().Count</b> vs <b>@currentMatch.Scores.Where(Score => (currentMatch.Team2.Players.Contains(Score.Scorer))).ToList().Count</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Score" Property="Assist" Title="Assist" Frozen="true" />

    </Columns>
</RadzenDataGrid>

<RadzenButton Click=@(args => RemoveLast()) Text="Undo" Style="margin-bottom: 20px; width: 150px" />
<RadzenButton Click=@(args => MatchOver()) Text="Match Over" Style="margin-bottom: 20px; width: 150px" />


@code {
    RadzenDataGrid<Score> dataGrid;
    PlayerSelect playerA;
    PlayerSelect playerB;
    PlayerSelect playerC;
    PlayerSelect playerD;
    public static Match currentMatch = Keeper_of_the_Scores.Data.DataHandler.CurrentMatch;
    List<Player> playersA = currentMatch.Team1.Players;
    List<Player> playersB = currentMatch.Team2.Players;
    Player scorer;
    Player assist;

    void AddToScoreA()
    {
        if (scorer != null)
        {
            Score score = new Score();
            score.Scorer = scorer;
            score.Assist = assist;
            score.DateTime = DateTime.Now;
            currentMatch.Scores.Add(score);
            dataGrid.Reload();
            RemoveSelect();
        }



    }

    void AddToScoreB()
    {
        if (scorer != null)
        {
            Score score = new Score();
            score.Scorer = scorer;
            score.Assist = assist;
            score.DateTime = DateTime.Now;
            currentMatch.Scores.Add(score);
            dataGrid.Reload();
        }


    }

    void RemoveSelect()
    {
        playerA.SelectedPlayer.Name = null;
        playerB.SelectedPlayer.Name = null;
        playerC.SelectedPlayer.Name = null;
        playerD.SelectedPlayer.Name = null;
    }

    void RemoveLast()
    {
        if (currentMatch.Scores.Count > 0)
        {
            currentMatch.Scores.RemoveAt(currentMatch.Scores.Count - 1);
            dataGrid.Reload();
        }

    }

    void MatchOver()
    {
        Keeper_of_the_Scores.Data.DataHandler.savedMatches.Add(currentMatch);

        UriHelper.NavigateTo("/");

    }

}
